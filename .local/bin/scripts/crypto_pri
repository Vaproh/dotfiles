#!/bin/sh

# Usage:
#	price <currency-base currency> <name of currency> <icon> <signal>
#	price bat-btc "Basic Attention Token" 🦁 24
#	This will give the price of BAT denominated in BTC and will update on
#	signal 24.
# When the name of the currency is multi-word, put it in quotes.

[ -z "$1" ] && exit 1

url="${CRYPTOURL:-rate.sx}"
target="${1%%-*}"
denom="${1##*-}"
name="${2:-$1}"
icon="${3:-💰}"
case "$denom" in
	"$target"|usd) denom="usd"; symb="$" ;;
	gbp) symb="£" ;;
	eur) symb="€" ;;
	btc) symb="" ;;
esac
interval="@14d"	# History contained in chart preceded by '@' (7d = 7 days)
dir="${XDG_CACHE_HOME:-$HOME/.cache}/crypto-prices"
pricefile="$dir/$target-$denom"
chartfile="$dir/$target-$denom-chart"
filestat="$(stat -c %x "$pricefile" 2>/dev/null)"

[ -d "$dir" ] || mkdir -p "$dir"

# Function to fetch INR exchange rate from Open Exchange Rates
fetch_inr_rate() {
    # Make sure you have your Open Exchange Rates API key
    OXR_API_KEY="${OX_API_KEY:-70643ee7870e412cacdd7b3568d8714a}"
    exchange_rate_file="$dir/oxr-inr-rate"
    
    # Fetch INR exchange rate if not cached or older than a day
    if [ ! -f "$exchange_rate_file" ] || [ "$(stat -c %Y "$exchange_rate_file")" -lt "$(date -d 'yesterday' +%s)" ]; then
        curl -sf "https://openexchangerates.org/api/latest.json?app_id=$OXR_API_KEY" -o "$exchange_rate_file" ||
        { echo "Error fetching INR exchange rate"; exit 1; }
    fi

    # Extract the INR rate from the JSON response (using jq to parse JSON)
    inr_rate=$(jq -r '.rates.INR' < "$exchange_rate_file")
    echo "$inr_rate"
}

updateprice() { 
    curl -sf \
    --fail-early "${denom}.${url}/1${target}" "${denom}.${url}/${target}${interval}" \
    --output "$pricefile" --output "$chartfile" ||
    rm -f "$pricefile" "$chartfile" ; 
}

[ "${filestat%% *}" != "$(date '+%Y-%m-%d')" ] &&
updateme="1"

case $BLOCK_BUTTON in
    1) setsid "$TERMINAL" -e less -Srf "$chartfile" ;;
    2) notify-send -u low "$icon Updating..." "Updating $name price..." ; updateme="1" ; showupdate="1" ;;
    3) uptime="$(date -d "$filestat" '+%D at %T' | sed "s|$(date '+%D')|Today|")"
        notify-send "$icon $name module" "\- <b>Exact price: \$$(cat "$pricefile")</b>
    - Left click for chart of changes.
    - Middle click to update.
    - Shows 🔃 if updating prices.
    - <b>Last updated:
    $uptime</b>" ;;
    6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Fetch INR exchange rate
inr_rate=$(fetch_inr_rate)

# Check if INR rate was fetched successfully
if [ -z "$inr_rate" ]; then
    echo "Error: INR exchange rate not available"
    exit 1
fi

# Update price if necessary
[ -n "$updateme" ] &&
updateprice "$target" &&
[ -n "$showupdate" ] &&
notify-send "$icon Update complete." "$name price is now
\$$(cat "$pricefile")"

# Fetch the current price and multiply it with INR rate
if [ -f "$pricefile" ]; then
    price=$(cat "$pricefile")
    price_inr=$(echo "$price * $inr_rate" | bc -l)  # Multiply the price by INR rate
    # Print INR price with commas and without the dollar sign
    printf "%s₹%'0.2f\n" "$icon" "$price_inr"
else
    echo "Price data not available."
fi

